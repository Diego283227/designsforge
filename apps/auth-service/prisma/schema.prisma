// Schema para AUTH-SERVICE únicamente
// Este servicio maneja SOLO autenticación y usuarios
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?  // Opcional para OAuth users
  avatar    String?
  role      Role     @default(USER)
  isVerified Boolean @default(false)
  
  // OAuth fields
  provider    AuthProvider? @default(LOCAL)
  providerId  String?
  
  // Configuración básica del usuario
  preferences Json?   // Preferencias generales (tema, idioma, etc.)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones SOLO dentro del auth-service
  sessions    Session[]
  accounts    Account[]
  
  @@map("users")
}

// OAuth Accounts (para múltiples proveedores)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Sesiones activas
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Tokens de verificación (email, reset password, etc.)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum AuthProvider {
  LOCAL
  GOOGLE
  GITHUB
  DISCORD
}